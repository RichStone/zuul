; --- Utility functions
(defn keys (d)
  (.keys d))

(defn comma-separate (coll)
  (.join coll ", "))

(defn starts-with? (text search)
  (.start_with? text search))

; Drop n characters from text
(defn text-drop (n text)
  (list->text (drop n (text->list text))))


; --- Enter area actions

(defn fall-off-cliff (_)
  (println "You fell off a cliff and died instantly.")
  (game-over))



(defn fall-in-hole (state)
  (println "You fell into a hole.")
  (action state))



(defn found-baby! (state)
  (assoc state :found-baby? true))

(defn found-baby? (state)
  (state :found-baby?))

(defn dragon-baby-found (state)
  (if (found-baby? state)
    (action state)
    (do
      (println "You found the dragon baby! It jumps on your shoulder and comes with you.")
      (action (found-baby! state)))))

(defn dragon-mother-found (state)
  (println "You found the dragon mother!")
  (if (found-baby? state)
    (do (println "She is thrilled that you have returned her baby, so she kills you and feeds you to the baby dragon.")
        (println "Congratulations! You returned the baby dragon to her mother."))
    (println "She is enraged over losing her baby and rips your head off."))
  (game-over))



(defn puppy-exploded! (state)
  (assoc state :puppy-exploded? true))

(defn puppy-exploded? (state)
  (state :puppy-exploded?))

(defn puppy-found (state)
  (if (puppy-exploded? state)
    (do
      (println "You walk over the scattered remains of the exploded puppy. It smells...")
      (action state))
    (rescue-puppy state)))

(defn rescue-puppy (state)
  (println "You find a little puppy with a ticking bomb strapped to its collar.")
  (println "Do you try to disarm it, or do you run away like a coward?")

  (let (input (prompt "Choose 'disarm' or 'bail': "))
    (if (= "bail" input)
      (do
        (println "You hear the puppy explode as you run back, you heartless monster.\n")
        (go-action (puppy-exploded! state) :east))
    (if (= "disarm" input)
      (do
        (println "You tried your best and both you and the puppy died.")
        (game-over))
    (do ; else
        (println "You have to choose!")
        (rescue-puppy state))))))



; --- Game state and level

(def world
  (dict :main-hall (dict :name   "entrance hall"
                         :exits  (dict :west  :west-wing
                                       :east  :east-wing
                                       :south :courtyard))

        :west-wing (dict :name   "west wing"
                         :exits  (dict :east :main-hall)
                         :action puppy-found)

        :east-wing (dict :name   "east wing"
                         :exits  (dict :west :main-hall)
                         :action dragon-mother-found)

        :courtyard (dict :name   "courtyard"
                         :exits  (dict :north :main-hall
                                       :east  :cellar
                                       :south :cliff
                                       :west  :hole))

        :cellar    (dict :name   "cellar"
                         :exits  (dict :west :courtyard)
                         :action dragon-baby-found)

        :cliff     (dict :name   "cliff"
                         :action fall-off-cliff)

        :hole      (dict :name   "hole"
                         :action fall-in-hole
                         :exits  (dict))))

(def initial-state
  (dict :world           world
        :current-area    (world :main-hall)
        :found-baby?     false
        :puppy-exploded? false))

; --- Gameplay

(defn exits-text (area)
  (comma-separate (keys (area :exits))))

(defn print-area (area)
  (println "You are in the " (area :name) ".")
  (println "Exits: " (exits-text area))
  (println))

(defn prompt-user-action ()
  (prompt "What do you want to do? "))

(defn game-over ()
  (println)
  (println "Thank you for playing."))

(defn enter-area (state area-name)
  (let (area         ((state :world) area-name)
        new-state    (assoc state :current-area area)
        enter-action (area :action))

    (if enter-action
      (enter-action new-state)
      (action new-state))))

(defn go-action (state direction)
  (let (exits ((state :current-area) :exits))
    (if (exits direction)
      (enter-area state (exits direction))
      (do
        (println "There is no exit to the " direction ".")
        (action state)))))

(defn action (state)
  (print-area (state :current-area))

  (let (input (prompt-user-action))
    (if (starts-with? input "go ")
      (go-action state (text-drop 3 input)) ; remove "go "
    (if (= "quit" input)
      (game-over)
    (do ; else
      (println "Invalid action.")
      (action state))))))

(defn play ()
  (println "Welcome to Zuul.")
  (println "Your objective is to help the baby dragon find its mother.")
  (println)
  (println "Type 'go {direction}' to walk around.")
  (println "Type 'quit' to quit the game.")
  (println)
  (action initial-state))

(play)
