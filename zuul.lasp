(defn cliff-action ()
  (println "You fell off a cliff and died instantly.")
  true) ; Game over

(def world
  (dict :main-hall (dict :name  "entrance hall"
                         :exits (dict :west  :west-wing
                                      :east  :east-wing
                                      :south :courtyard))

        :west-wing (dict :name  "west wing"
                         :exits (dict :east :main-hall))

        :east-wing (dict :name  "east wing"
                         :exits (dict :west :main-hall))

        :courtyard (dict :name  "courtyard"
                         :exits (dict :north :main-hall
                                      :east  :cellar
                                      :south :cliff))

        :cellar    (dict :name  "cellar"
                         :exits (dict :west :courtyard))

        :cliff     (dict :name   "cliff"
                         :action cliff-action)))

(def starting-point (world :main-hall))

(defn keys (d)
  (. d :keys))

(defn comma-separate (d)
  (. d :join ", "))

(defn starts-with? (text search)
  (. text :start_with? search))

; Drop n characters from text
(defn text-drop (n text)
  (list->text (drop n (text->list text))))



(defn exits (room)
  (comma-separate (keys (room :exits))))

(defn print-room (room)
  (println "You are in the " (room :name) ".")
  (println "Exits: " (exits room))
  (println))

(defn prompt-user-action ()
  (prompt "What do you want to do? "))

(defn game-over () (println "Thank you for playing."))

(defn enter-area (area-name)
  (let (area         (world area-name)
        enter-action (area :action))
    (if enter-action
      (if (enter-action)
        (game-over)
        (action area))
      (action area)))) ; TODO: Fix duplication


(defn go-action (room go-action)
  (let (direction (text-drop 3 go-action) ; remove "go "
        exits     (room :exits))
    (if (exits direction)
      (enter-area (exits direction))
      (do
        (println "There is no exit to the " direction ".")
        (action room)))))

(defn action (current-room)
  (print-room current-room)
  (let (input (prompt-user-action))
    (if (starts-with? input "go ")
      (go-action current-room input)
    (if (= "quit" input)
      (println "Bye!")
    (do ; else
      (println "Invalid action.")
      (action current-room))))))

(defn play ()
  (println "Welcome to Zuul."
  (println "Type 'go {direction}' to walk around.")
  (println "Type 'quit' to quit the game."))
  (println)
  (action starting-point))

(play)
